<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>게시판 페이징</title>
    <style>
        * { margin: 0; padding: 0;}
        ul,li,ol { list-style: none;}
        .paging { display: flex;}
        .paging li { margin: 0 15px;}
        .paging li a { color: #000;}
        .paging li.highlight a{ color: red;}
    </style>
</head>
<body>
    <!-- /boardtest?page=1 = ?page=1 -->
    <!-- 데이터를 보여주는 구간 -->
    <table>
        <tr>
            <th>번호</th>
            <th>제목</th>
        </tr>
        <% for(let i = 0 ; i< prdData.length; i++) { %>
        <tr>
            <td><%- prdData[i].number %></td>
            <td><%- prdData[i].title %></td>
        </tr>
        <% } %>    
    </table>

    <!-- 페이징 번호 생성된 구간 처음 이전 1,2,3 다음 마지막 -->
    <ul class="paging">
        <!-- 1번페이지인 경우 -->
        <% if(pageNumber <=1 ){ %> 
            <li>처음</li>
        <% } else { %>
            <!-- /boardtest?page=1 -->
            <li><a href="?page=1">처음</a></li>
        <% } %>    
        
        <% if(blockStart > totalBlock) { %>
            <li><a href="?page=<%- blockStart - 1 %>">이전</a></li>
        <% } %>

        <% for( let i = blockStart; i<= blockEnd; i++) { %>
            <% if(pageNumber == i) { %>
            <li class="highlight"><a href="?page=<%- i %>"><%- i %></a></li>
            <% } else { %>    
            <li><a href="?page=<%- i %>"><%- i %></a></li>
            <% } %>
        <% } %>

        <% if(blockNum < totalBlock) { %>
            <li><a href="?page=<%- blockEnd +1 %>">다음</a></li>
        <% } %>
       <!-- pageNumber 내가보고 있는  -->
        <% if( pageNumber >= paging) { %>
            <li>마지막</li>
        <% } else { %>
            <li><a href="?page=<%- paging %>">마지막</a></li>
        <% } %>
    </ul>
    app.get("/inquire",async (req,res)=>{
        // query string 보내줌 데이터값 받는 방법
        // console.log(req.query.page);  // boardtest?page=300
        // res.send("테스트");
      
        // 사용자가 게시판에 접속시 몃번 페이징 번호로 접속했는지 체크
        // let pageNumber = typeof(req.query.page);
        // console.log(pageNumber);
        // res.send("테스트");
        let pageNumber = (req.query.page ==null) ? 1 : Number(req.query.page) ; //let pageNumber = 조건식 ? 참 : 거짓 ;
        // console.log(pageNumber);
        
        // 블록당 보여줄 데이터 갯수  
        let perPage = 9;   // 게시판 목록에 보여줄 갯수
        
        // 블록당 보여줄 페이징 번호 갯수
      
        let blockCount = 3; // 숫자에 따라 계산은 달라짐
      
        // 현재 페이지 블록 구하기
      
        let blockNum = Math.ceil(pageNumber / blockCount);  // Math.ceil 올림
      
        // console.log(blockNum);
      
        // 블록안에 있는 페이징의 시작번호 값을 알아내기
      
        let blockStart = ((blockNum - 1) * blockCount) + 1;
      
        // console.log(blockStart);    
      
        // 블록안에 있는 페이징의 끝 번호 값을 알아내자
        
        let blockEnd = blockStart + blockCount -1 ;
      
        // 데이터베이스 콜렉션에 있는 전체 객체의 갯수값 가져오는 명령어
      
        let totalData = await db.collection("ex1_Inquire").countDocuments({});
        
        // console.log(totalData);
      
        // 전체 데이터값을 통해서 -> 몃개의 페이징 번호가 만들어져야 하는지 계산
      
        let paging = Math.ceil(totalData / perPage);
      
        // 블록에서 마지막 번호가 페이징의 끝번호보다 크다면 페이징의 끝번호를 강제로 부여
        if(blockEnd > paging){
            blockEnd = paging;
        }
      
        // 블록의 총 갯수 구하기
      
        let totalBlock = Math.ceil(paging / blockCount);
        
        // 데이터베이스에서 꺼내오는 데이터의 순번값을 결정   0 2번페이지2 4
      
        let startFrom = (pageNumber -1) * perPage 
      
      
        // 데이터베이스 콜렉션에서 데이터값을 2개씩 순번에 맞춰서 가져오기
        db.collection("ex1_Inquire").find({}).sort({number:-1}).skip(startFrom).limit(perPage).toArray((err,result)=>{ // 역순-1  정순서 1
            // console.log(result);                 //역순      //순서   //2개
            
              res.render("inquire",{inquire:result,
                                
                                userData:req.user,
                                paging:paging,
                                pageNumber:pageNumber,
                                blockStart:blockStart,
                                blockEnd:blockEnd,
                                blockNum:blockNum,
                                totalBlock:totalBlock});
         
        }); 
            // board.ejs에 전달해줘야할 데이터들
            // 1.board 콜렉션에서 가지고온 데이터값 result
            // 2.페이징 번호의 총 갯수값 paging
            // 3.몃번 페이징을 보고 있는지 번호값 pageNumber
            // 4.블록안에 페이징 시작하는 번호값 blockStart
            // 5.블록안에 페이징 끝나는 번호값 blockEnd
            // 6.블록 번호 순서값 blockNum
            // 7.블록 총 갯수 totalBlock
        
      
        // sort({정렬할프로퍼티명:1}) 1 오름차순 -1 은 내림차순
      
        // 블록의 총갯수 , 데이터베이스에 실제 값을 꺼내기 위해 몇개씩 꺼내올건지 설정 , find 명령어 sort() skip() limit()
      
        // 만약 블록안에 있는 페이징의 끝 번호값이 전체 페이징 갯수보다 많다면 강제로 마지막 페이징 번호 부여
        
       
      });
    <div class="brqe">
        <% if(userData.joinnick === "admin") { %> 
        <a class="brd dqe" href="/eventupt/<%- eventData.brdid %>">수정</a>
        <a class="brd dde" id="del" href="/delete/<%- eventData.brdid %>">삭제</a>
        <% } %>
        <a class="brd dte" href="/event">목록</a>
    </div>
</body>
</html>